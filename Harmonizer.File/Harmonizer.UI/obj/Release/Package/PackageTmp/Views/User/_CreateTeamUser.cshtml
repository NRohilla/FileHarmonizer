@model Harmonizer.UI.Models.RegisterUser
@using System.Collections
<link href="~/Content/select2.css" rel="stylesheet" />
<script src="~/Scripts/select2.js"></script>



<style>

    .ui-datepicker table {
        table-layout: fixed !important;
    }

    .ui-datepicker {
        width: 337px; /*what ever width you want*/
    }
</style>

<h4>Login Information</h4>
<hr />

<div class="">
    <div class="form-group">
        <div class="row">
            <div class="col-md-2 ">
                @Html.Label("User ID", htmlAttributes: new { @class = "control-label form-label" })
                <span class="text-danger font-weight-bold">*</span>

            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.User.UserID, new { @class = "form-control", @ID = "txtUserID" })
            </div>
            <div class="col-md-2 ">
                @Html.Label("Email ID", htmlAttributes: new { @class = "control-label form-label" })
                <span class="text-danger font-weight-bold">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.User.EmailID, new { @class = "form-control", @ID = "txtEmailID" })
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-md-2 ">
                @Html.Label("Password", htmlAttributes: new { @class = "control-label form-label" })
                <span class="text-danger font-weight-bold">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.User.Password, new { @class = "form-control", @ID = "txtPassword", @type = "Password" })

            </div>
            <div class="col-md-2 ">
                @Html.Label("Confirm Password", htmlAttributes: new { @class = "control-label form-label" })
                <span class="text-danger font-weight-bold">*</span>
            </div>
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.User.ConfirmPassword, new { @class = "form-control", @ID = "txtConfirmPassword", @type = "Password" })
            </div>
        </div>

    </div>
    <div class="my-2" id="divPersonalInfo">
        <h4><span id="lblPersonalInfo">Personal Info</span></h4>
        <hr />
        <div class="">

            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Title", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        <select class="form-control" id="txtTitle" name="txtTitle" style="padding:0;">
                            <option value="Mr.">Mr.</option>
                            <option value="Miss.">Miss.</option>
                            <option value="Mrs.">Mrs.</option>
                            <option value="Ms.">Ms.</option>
                            <option value="Dr.">Dr.</option>
                        </select>
                        @Html.HiddenFor(mode => mode.PersonalInfo.Title)
                    </div>

                    <div class="col-md-2 ">
                        @Html.Label("First Name", htmlAttributes: new { @class = "control-label form-label" })<span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PersonalInfo.FirstName, new { @class = "form-control", @ID = "txtPesonalFirstName" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Last Name", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PersonalInfo.LastName, new { @class = "form-control", @ID = "txtPersonalLastName" })
                    </div>

                    <div class="col-md-2 ">
                        @Html.Label("Middle Name", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PersonalInfo.MiddleName, new { @class = "form-control", @ID = "txtPersonalMiddleName" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("2nd First Name", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PersonalInfo.Name2, new { @class = "form-control", @ID = "txtPesonalName2" })
                    </div>

                    <div class="col-md-2 ">
                        @Html.Label("2nd Last Name", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PersonalInfo.LastName2, new { @class = "form-control", @ID = "txtPesonalLastName2" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("AKA", htmlAttributes: new { @class = "control-label form-label" })
                        <span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PersonalInfo.AKA, new { @class = "form-control", @ID = "txtPesonalAKA" })
                    </div>

                    <div class="col-md-2 ">
                        @Html.Label("Gender", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        <select class="form-control" id="txtGender" name="txtGender" style="padding:0;">
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                        </select>
                        @Html.HiddenFor(mode => mode.PersonalInfo.Gender)
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Date Born", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        <input autocomplete="off" placeholder="mm/dd/yyyy" name=x size=10 maxlength=10 id="txtPesonalDateOfBorn" class="form-control" onkeyup="this.value=this.value.replace(/^(\d\d)(\d)$/g,'$1/$2').replace(/^(\d\d\/\d\d)(\d+)$/g,'$1/$2').replace(/[^\d\/]/g,'')">
                        @*@Html.TextBoxFor(model => model.PersonalInfo.DateOfBorn, new { @class = "form-control", @ID = "txtPesonalDateOfBorn", @type = "Date", @value = @DateTime.Now.ToShortDateString() })*@
                        <i style="position: absolute; right: 25px; top: 12px;" class="fa fa-calendar ui-datepicker-trigger"></i>
                    </div>


                    <div class="col-md-2 ">
                        @Html.Label("Preferred Language", htmlAttributes: new { @class = "control-label form-label" })
                        <span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.DropDownList("ddlPersonalLanguage", new SelectList((IEnumerable)ViewData["Languagelst"], "Language", "LanguageDescription"), new { @class = "form-control js-example-basic-single" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Birth Country", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.DropDownList("ddlPersonalBirthCountry", new SelectList((IEnumerable)ViewData["Countrylst"], "Alpha3", "CountryName"), new { @class = "form-control js-example-basic-single" })
                    </div>
                    <div class="col-md-2 ">
                        @Html.Label("Country\\Default", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.DropDownList("ddlPersonalDefaulCountry", new SelectList((IEnumerable)ViewData["Countrylst"], "Alpha3", "CountryName"), new { @class = "form-control js-example-basic-single" })
                    </div>
                </div>
            </div>
            <!-- Last update-->
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Mobile Phone", htmlAttributes: new { @class = "control-label form-label" })
                        <span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PersonalInfo.Mobile, new { @class = "form-control", @ID = "txtPersonalMobilePhone", @maxlength = "15" })
                    </div>
                    <div class="col-md-2 ">
                        @Html.Label("Phone", htmlAttributes: new { @class = "control-label form-label" })
                        <span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PersonalInfo.Phone, new { @class = "form-control", @ID = "txtPesonalPhone", @maxlength = "15" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Email", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PersonalInfo.Email, new { @class = "form-control", @ID = "txtPersonalEmail" })
                    </div>
                    <div class="col-md-2 ">
                        @Html.Label("Role", htmlAttributes: new { @class = "control-label form-label" })
                        <span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.PersonalInfo.TeamMemberRole, new { @class = "form-control", @ID = "txtTeamUserRole", @maxlength = "40" })
                    </div>
                </div>
            </div>

        </div>
    </div>


    <div class="my-2" id="divAddress">
        <h4><span id="lblAddress">Address Info</span></h4>
        <hr />
        <div class="">

            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Address 1", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.AddInfo.Address1, new { @class = "form-control", @ID = "txtAddress1" })
                    </div>

                    <div class="col-md-2 ">
                        @Html.Label("Address 2", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.AddInfo.Address2, new { @class = "form-control", @ID = "txtAddress2" })
                    </div>
                </div>
            </div>


            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("City", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.AddInfo.City, new { @class = "form-control", @ID = "txtAddressCity" })
                    </div>

                    <div class="col-md-2 ">
                        @Html.Label("State", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.AddInfo.State, new { @class = "form-control", @ID = "txtAddressState" })
                    </div>
                </div>

            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Zip", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.AddInfo.Zip, new { @class = "form-control", @ID = "txtAddressZip", @maxlength = "12" })
                    </div>

                    <div class="col-md-2 ">
                        @Html.Label("Country", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.DropDownList("AddressCountry", new SelectList((IEnumerable)ViewData["Countrylst"], "Alpha3", "CountryName"), new { @class = "form-control js-example-basic-single" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">

                    <div class="col-md-2 ">
                        @Html.Label("PO Box", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.AddInfo.POBox, new { @class = "form-control", @ID = "txtAddressPOBox" })
                    </div>
                    <div class="col-md-2 ">
                        @Html.Label("Timezone", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.AddInfo.TimeZone, new { @class = "form-control", @ID = "txtAddressTimezone" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Location", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.AddInfo.Location, new { @class = "form-control", @ID = "txtAddressLocation" })
                    </div>

                    <div class="col-md-2 ">
                        @Html.Label("District Postal Code", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.AddInfo.DistrictPostalCode, new { @class = "form-control", @ID = "txtAddressDistrictPostalCode", @maxlength = "10" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">

                    <div class="col-md-2 ">
                        @Html.Label("County", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.AddInfo.Country, new { @class = "form-control", @ID = "txtAddressCounty" })
                    </div>
                </div>
            </div>
            @Html.HiddenFor(model => model.User.RegistrationType, new { @Id = "RegistrationTypeId" })
            <div class="form-group">
                <div class="text-right">
                    <input type="button" id="btnCreateTemUser" name="Create" class="btn btn-info" value="Create" />
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        $('.js-example-basic-single').select2();

        //calender
        $("#txtPesonalDateOfBorn").datepicker({

            dateFormat: "mm/dd/yy",
            //yyyy/mm/dd
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+0" 

        });
        $('.fa-calendar').click(function () {
            $("#txtPesonalDateOfBorn").focus();

        });
        //end

        $('#btnCreateTemUser').click(function (e) {
            e.preventDefault();
            debugger;
            //validation
            if (ValidateUserData() == true) {
               // Ajax call to registrer user as Team Member
                // Initalize data object
                var User = {};
                var PersonalInformation = {};
                var AddressIinformation = {};
                var BusinessInformation = {};
                // fill data to object
                User.UserID = $('#txtUserID').val().trim();
                User.EmailID = $('#txtEmailID').val().trim();
                User.Password = $('#txtPassword').val().trim();
                User.ConfirmPassword = $('#txtConfirmPassword').val().trim();
                User.RegistrationType = "TeamMember";
                User.Role = 6;
                //-------- Personal Information
                PersonalInformation.Title = $('#txtTitle').children("option:selected").val().trim();
                if (PersonalInformation.Title != '')
                    $('#PersonalInfo_Title').val($('#txtTitle').children("option:selected").val().trim());

                PersonalInformation.MiddleName = $('#txtPersonalMiddleName').val().trim();
                PersonalInformation.FirstName = $('#txtPesonalFirstName').val().trim();
                PersonalInformation.LastName = $('#txtPersonalLastName').val().trim();
                PersonalInformation.Name2 = $('#txtPesonalName2').val().trim();
                PersonalInformation.LastName2 = $('#txtPesonalLastName2').val().trim();
                PersonalInformation.AKA = $('#txtPesonalAKA').val().trim();
                PersonalInformation.Gender = $('#txtGender').children("option:selected").val().trim();
                PersonalInformation.DateOfBorn = $('#txtPesonalDateOfBorn').val().trim();
                PersonalInformation.Language = $('#ddlPersonalLanguage').val().trim();
                PersonalInformation.BirthCountry = $('#ddlPersonalBirthCountry').val().trim();
                PersonalInformation.DefaulCountry = $('#ddlPersonalDefaulCountry').val().trim();
                PersonalInformation.Mobile = $('#txtPersonalMobilePhone').val().trim();
                PersonalInformation.Phone = $('#txtPesonalPhone').val().trim();
                PersonalInformation.Email = $('#txtPersonalEmail').val().trim();
                PersonalInformation.TeamMemberRole = $('#txtTeamUserRole').val().trim();

                //---------- Address
                AddressIinformation.Address1 = $('#txtAddress1').val().trim();
                AddressIinformation.Address2 = $('#txtAddress2').val().trim();
                AddressIinformation.City = $('#txtAddressCity').val().trim();
                AddressIinformation.State = $('#txtAddressState').val().trim();
                AddressIinformation.Zip = $('#txtAddressZip').val().trim();
                AddressIinformation.CountryKey = $('#AddressCountry').val().trim();
                debugger;
                if (AddressIinformation.CountryKey!='') {
                    AddressIinformation.Country = $("#AddressCountry option:selected").text().trim();
                }
                else {
                    AddressIinformation.Country = null;
                }
                AddressIinformation.Timezone = $('#txtAddressTimezone').val().trim();
                AddressIinformation.Location = $('#txtAddressLocation').val().trim();
                AddressIinformation.DistrictPostalCode = $('#txtAddressDistrictPostalCode').val().trim();
                AddressIinformation.POBox = $('#txtAddressPOBox').val().trim();
                AddressIinformation.county = $('#txtAddressCounty').val().trim();

                var registerUserData = {
                    "User": User,
                    "PersonalInfo": PersonalInformation,
                    "AddInfo": AddressIinformation,
                    "BPInfo": BusinessInformation
                };

                // call ajax
                $.ajax({
                    type: "POST",
                    url:'@Url.Action("RegisterTeamUser", "User")',
                    data: '{registerUserData: ' + JSON.stringify(registerUserData) + '}',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        if (response.operationValue == '-1') {
                            alert(response.responseText);
                        }
                        else {
                            window.location.reload(true);
                        }
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });

            } else {
                alert("Please fill correct data!");
                return false;
            }
        });
    });


    function ValidateUserData() {
        IsValide = false;
        var vtxtUserID = 0, vtxtEmailID = 0, vtxtPassword = 0, vtxtConfirmPassword = 0, vtxtTitle = 0,
            vtxtFirstName = 0, vtxtLastName = 0, vtxtMiddleName = 0, vtxtName2 = 0, vtxtLastName2 = 0,
            vtxtAKA = 0, vtxtGender = 0, vtxtProfession = 0, vtxtLanguage = 0, vtxtCountry = 0,
            vtxtCompName = 0, vtxtCompName2 = 0, vtxtDepartment = 0, vtxtAddress1 = 0, vtxtAddress2 = 0,
            vtxtPOBox = 0, vtxtCity = 0, vtxtState = 0, vtxtZip = 0, vtxtAddressCountry = 0, vtxtAddressLanguage = 0,
            vtxtPhone = 0, vtxtWorkPhone = 0, vtxtMobilePhone = 0, vtxtFax = 0, vtxtTimezone = 0, vtxtLocation = 0, vtxtDistrictPostalCode = 0, matchPassword = 0;
        emailValidate = 0; vddlIndustry = 0, vddlBPType = 0, vtxtAddressState = 0, vtxtPersonalEmail = 0, vtxtDefaultLanguage = 0, vtxtBPMainPhone = 0, vtxtBPEmail = 0, vtxtTeamUserRole=0;

        if ($('#txtUserID').val() == "") {
            vtxtUserID = -1;
            $('#txtUserID').addClass("validateClass");
        }
        else {
            $('#txtUserID').removeClass("validateClass");
        }
        // Email
        if ($('#txtEmailID').val() == "") {
            vtxtEmailID = -1;
            $('#txtEmailID').addClass("validateClass");
        }
        else {
            $('#txtEmailID').removeClass("validateClass");
        }
        // pass
        if ($('#txtPassword').val() == "") {
            vtxtPassword = -1;
            $('#txtPassword').addClass("validateClass");
        }
        else {
            $('#txtPassword').removeClass("validateClass");
        }
        // Confirm
        if ($('#txtConfirmPassword').val() == "") {
            vtxtConfirmPassword = -1;
            $('#txtConfirmPassword').addClass("validateClass");
        }
        else {
            $('#txtConfirmPassword').removeClass("validateClass");
        }
        // First Name
        if ($('#txtPesonalFirstName').val() == "") {
            vtxtFirstName = -1;
            $('#txtPesonalFirstName').addClass("validateClass");
        }
        else {
            $('#txtPesonalFirstName').removeClass("validateClass");
        }
        // AKA Name
        if ($('#txtPesonalAKA').val() == "") {
            vtxtAKA = -1;
            $('#txtPesonalAKA').addClass("validateClass");
        }
        else {
            $('#txtPesonalAKA').removeClass("validateClass");
        }

        //Team User Role
        // AKA Name
        if ($('#txtTeamUserRole').val() == "") {
            vtxtTeamUserRole = -1;
            $('#txtTeamUserRole').addClass("validateClass");
        }
        else {
            $('#txtTeamUserRole').removeClass("validateClass");
        }
        // pref. language
        if ($('#ddlPersonalLanguage').val() == "Select Language") {
            vtxtCountry = -1;
            $('#ddlPersonalLanguage').addClass("validateClass");
        }
        else {
            $('#ddlPersonalLanguage').removeClass("validateClass");
        }

        // For zip mobile and phone and postatl code

        if ($('#txtAddressDistrictPostalCode').val() != "") {
            if (allnumeric($('#txtAddressDistrictPostalCode').val()) == -1) {
                $('#txtAddressDistrictPostalCode').addClass("validateClass");
                vtxtDistrictPostalCode = -1;
            }
            else {
                $('#txtAddressDistrictPostalCode').removeClass("validateClass");
            }

        }

            if ($('#txtAddressZip').val() != "") {
                if (allnumeric($('#txtAddressZip').val()) == -1) {
                    $('#txtAddressZip').addClass("validateClass");
                    vtxtZip = -1;
                }
                else {
                    $('#txtAddressZip').removeClass("validateClass");
                }
            }



        // Mobile
        if ($('#txtPersonalMobilePhone').val() == "") {
            vtxtMobilePhone = -1;
            $('#txtPersonalMobilePhone').addClass("validateClass");
        }
        else {
            vtxtMobilePhone = allnumeric($('#txtPersonalMobilePhone').val());
            if (vtxtMobilePhone == 0) {
                $('#txtPersonalMobilePhone').removeClass("validateClass");
            }
            else {
                $('#txtPersonalMobilePhone').addClass("validateClass");
            }
        }



        if ($('#txtPesonalPhone').val() == "") {
            $('#txtPesonalPhone').addClass("validateClass");
            vtxtPhone = -1;
        }
        else {
            if ($('#txtPesonalPhone').val() != "") {
                if (allnumeric($('#txtPesonalPhone').val()) == -1) {
                    $('#txtPesonalPhone').addClass("validateClass");
                    vtxtPhone = -1;
                }
                else {
                    $('#txtPesonalPhone').removeClass("validateClass");
                }
            }
        }

        matchPassword = validatepassword();
        emailValidate = validateEmail($('#txtEmailID').val());
        if (vtxtUserID == 0 && vtxtEmailID == 0 && vtxtPassword == 0 && vtxtConfirmPassword == 0 && vtxtTitle == 0 &&
            vtxtFirstName == 0 && vtxtLastName == 0 && vtxtMiddleName == 0 && vtxtName2 == 0 && vtxtLastName2 == 0 &&
            vtxtAKA == 0 && vtxtGender == 0 && vtxtProfession == 0 && vtxtLanguage == 0 && vtxtCountry == 0 &&
            vtxtCompName == 0 && vtxtCompName2 == 0 && vtxtDepartment == 0 && vtxtAddress1 == 0 && vtxtAddress2 == 0 &&
            vtxtPOBox == 0 && vtxtCity == 0 && vtxtState == 0 && vtxtZip == 0 && vtxtAddressCountry == 0 && vtxtAddressLanguage == 0 &&
            vtxtPhone == 0 && vtxtWorkPhone == 0 && vtxtMobilePhone == 0 && vtxtFax == 0 && vtxtTimezone == 0 && vtxtLocation == 0 &&
            vtxtDistrictPostalCode == 0 && matchPassword == 0 && emailValidate == 0 && vddlIndustry == 0 && vddlBPType == 0 && vtxtAddressState == 0 && vtxtPersonalEmail == 0 && vtxtBPEmail == 0
            && vtxtDefaultLanguage == 0 && vtxtBPMainPhone == 0 && vtxtTeamUserRole==0) {

            IsValide = true;
        }


        return IsValide;

    }
    function validatepassword() {
        var validatepass = 0;
        if ($('#txtPassword').val() != $('#txtConfirmPassword').val()) {
            $('#txtConfirmPassword').addClass("validateClass");
            validatepass = -1;
        }
        else {
            $('#txtConfirmPassword').removeClass("validateClass");

        }

        return validatepass;
    }
    function validateEmail(sEmail) {

        var filter = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        if (filter.test(sEmail)) {
            // return true;
            $('#txtEmailID').removeClass("validateClass");
            return 0;
        }

        else {
            //return false;
            $('#txtEmailID').addClass("validateClass");
            return -1;
        }
    }
    function allnumeric(inputtxt) {
        // var numbers = /^[-+]?[0-9]+$/;// for + and - as optional
        var numbers = /^[0-9]+$/;
        if (numbers.test(inputtxt)) {
            //return true;
            return 0;
        }
        else {
            //return false;
            return -1;
        }
    }


</script>