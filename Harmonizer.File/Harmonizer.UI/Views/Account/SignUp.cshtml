@using System.Collections
@model Harmonizer.UI.Models.RegisterUser
@{
    ViewBag.Title = "File Harmonizer - SignUp";
}
<link href="~/Content/select2.css" rel="stylesheet" />
<script src="~/Scripts/select2.js"></script>

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">

<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<style>

    .ui-datepicker table {
        table-layout: fixed !important;
    }

    .ui-datepicker {
        width: 337px; /*what ever width you want*/
    }
</style>

<div class="form-horizontal my-3">
    <div class="container">
        <div class="blink_heading">
            <h4>Login Information</h4>
        </div>
        @*<input type="checkbox" value="UserIDPassword" id="chkRegistrationType" class="chkcheck" /> <span class="text-info">Register as Business Partner</span>
            <span class="text-info ml-5"> <input type="checkbox" value="" id="chkIndividual" class="uncheck" />Register as Indivisual</span>*@
        <hr />
        <div class="bg-white p-3 border">
            <div class="form-group">
                <div class="row">
                    <div class="col-md-12 text-danger">
                        * These fields are required.
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("User ID", htmlAttributes: new { @class = "control-label form-label" })  <span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.User.UserID, new { @class = "form-control", @ID = "txtUserID" })
                    </div>
                    <div class="col-md-2 ">
                        @Html.Label("Email Address", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.User.EmailID, new { @class = "form-control", @ID = "txtEmailID" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Password", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.User.Password, new { @class = "form-control", @ID = "txtPassword", @type = "Password" })

                    </div>
                    <div class="col-md-2 ">
                        @Html.Label("Confirm Password", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.User.ConfirmPassword, new { @class = "form-control", @ID = "txtConfirmPassword", @type = "Password" })
                    </div>
                </div>

            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2 ">
                        @Html.Label("Industry", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                    </div>

                    <div class="col-md-4">
                        @Html.DropDownList("Industry", new SelectList((IEnumerable)ViewData["lstIndustry"], "Value", "Text"), new { @class = "form-control  js-example-basic-single" })
                    </div>

                    <div class="col-md-2 ">
                        @Html.Label("Business Type", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                    </div>
                    <div class="col-md-4">
                        <select id="ddlBPType" class="form-control"></select>
                    </div>


                </div>

            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2">
                        @Html.Label("G", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @*<input type="text" value="M" readonly class="form-control" />*@
                        @Html.TextBoxFor(model => model.User.DefaultG, new { @class = "form-control", @Value = "M", @id = "txtDefaultG", @readonly = "readonly" })
                    </div>
                    <div class="col-md-2">
                        @Html.Label("PL", htmlAttributes: new { @class = "control-label form-label" })
                    </div>
                    <div class="col-md-4">
                        @*<input type="text" value="E" readonly class="form-control" />*@
                        @Html.TextBoxFor(model => model.User.DefaultPL, new { @Value = "E", @class = "form-control", @id = "txtDefaultPL", @readonly = "readonly" })
                    </div>
                </div>
            </div>
        </div>
        <div class="my-2" id="divPersonalInfo">
            <h4><span id="lblPersonalInfo"></span></h4>
            <hr />
            <div class="bg-white p-3 border">
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Title", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            <select class="form-control" id="txtTitle" name="txtTitle" style="padding:0;">
                                <option value="Mr.">Mr.</option>
                                <option value="Miss.">Miss.</option>
                                <option value="Mrs.">Mrs.</option>
                                <option value="Ms.">Ms.</option>
                                <option value="Dr.">Dr.</option>
                            </select>
                            @Html.HiddenFor(mode => mode.PersonalInfo.Title)
                        </div>
                        <div class="col-md-2">
                            @Html.Label("First Name", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.FirstName, new { @class = "form-control", @ID = "txtPesonalFirstName" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-2">
                            @Html.Label("Last Name", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>

                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.LastName, new { @class = "form-control", @ID = "txtPersonalLastName" })
                        </div>
                        <div class="col-md-2 ">
                            @Html.Label("Middle Name", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.MiddleName, new { @class = "form-control", @ID = "txtPersonalMiddleName" })
                        </div>

                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("2nd First Name", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.Name2, new { @class = "form-control", @ID = "txtPesonalName2" })
                        </div>

                        <div class="col-md-2 ">
                            @Html.Label("2nd Last Name", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.LastName2, new { @class = "form-control", @ID = "txtPesonalLastName2" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("AKA", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.AKA, new { @class = "form-control", @ID = "txtPesonalAKA" })
                        </div>

                        <div class="col-md-2 ">
                            @Html.Label("Gender", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            <select class="form-control" id="txtGender" name="txtGender" style="padding:0;">
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                            </select>
                            @Html.HiddenFor(mode => mode.PersonalInfo.Gender)
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Date Born", htmlAttributes: new { @class = "control-label form-label" })<span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @*@Html.TextBoxFor(model => model.PersonalInfo.DateOfBorn, new { @class = "form-control", @ID = "txtPesonalDateOfBorn",@type="Date", @value = @DateTime.Now.ToShortDateString() })*@
                            <input autocomplete="off" placeholder="mm/dd/yyyy" name=x size=10 maxlength=10 id="txtPesonalDateOfBorn" class="form-control" onkeyup="this.value=this.value.replace(/^(\d\d)(\d)$/g,'$1/$2').replace(/^(\d\d\/\d\d)(\d+)$/g,'$1/$2').replace(/[^\d\/]/g,'')">
                            <i style="position: absolute; right: 25px; top: 12px;" class="fa fa-calendar ui-datepicker-trigger"></i>
                        </div>


                        <div class="col-md-2 ">
                            @Html.Label("Preferred Language", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @Html.DropDownList("ddlPersonalLanguage", new SelectList((IEnumerable)ViewData["Languagelst"], "Language", "LanguageDescription"), new { @class = "form-control js-example-basic-single" })
                            @*@Html.TextBoxFor(model => model.PersonalInfo.Language, new { @class = "form-control", @ID = "txtLanguage" })*@
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">

                            @Html.Label("Birth Country", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.DropDownList("ddlPersonalBirthCountry", new SelectList((IEnumerable)ViewData["Countrylst"], "Alpha3", "CountryName"), new { @class = "form-control js-example-basic-single" })
                        </div>
                        <div class="col-md-2 ">
                            @Html.Label("Occupation", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.Profession, new { @class = "form-control", @ID = "txtProfessionOccuption" })
                        </div>

                    </div>
                </div>
                <!-- Last update-->
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Country\\Default", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @*@Html.TextBoxFor(model => model.PersonalInfo.Country, new { @class = "form-control", @ID = "txtCountry" })*@
                            @Html.DropDownList("ddlPersonalDefaulCountry", new SelectList((IEnumerable)ViewData["Countrylst"], "Alpha3", "CountryName"), new { @class = "form-control  js-example-basic-single" })
                        </div>

                        <div class="col-md-2 ">
                            @Html.Label("Mobile Phone", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.Mobile, new { @class = "form-control", @ID = "txtPersonalMobilePhone", @maxlength = "15", @placeholder = "(000) 000-0000" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Work Phone", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.WorkPhone, new { @class = "form-control", @ID = "txtPersonalWorkPhone", @maxlength = "15", @placeholder = "(000) 000-0000" })
                        </div>

                        <div class="col-md-2 ">
                            @Html.Label("Fax", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.Fax, new { @class = "form-control", @ID = "txtPersonalFax", @maxlength = "15", @placeholder = "(000) 000-0000" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Phone", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.Phone, new { @class = "form-control", @ID = "txtPesonalPhone", @maxlength = "15",@placeholder="(000) 000-0000" })
                        </div>

                        <div class="col-md-2 ">
                            @Html.Label("Contact Email", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.Email, new { @class = "form-control", @ID = "txtPersonalEmail" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Web site", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.PersonalInfo.Website, new { @class = "form-control", @ID = "txtPesonalWebsite" })
                        </div>

                    </div>
                </div>
            </div>
        </div>

        <!-- For BP Info-->
        <div class="my-2" id="lblBPInfo">
            <h4><span id="lblBPInfoHeader"> Business information</span></h4>
            <hr />
            <div class="bg-white p-3 border">
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Company Name", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.CompName, new { @class = "form-control", @ID = "txtBPCompName" })
                        </div>

                        <div class="col-md-2 ">
                            @Html.Label("Contact Name First", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.ContactNameFirst, new { @class = "form-control", @ID = "txtBPContactNameFirst" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Contact Name Last", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.ContactNameLast, new { @class = "form-control", @ID = "txtBPContactNameLast" })
                        </div>
                        <div class="col-md-2 ">
                            @Html.Label("Company EIN\\TIN", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.CompanyEIN, new { @class = "form-control", @ID = "txtBPCompanyEIN" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Company Date", htmlAttributes: new { @class = "control-label form-label" })<span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @*@Html.TextBoxFor(model => model.BPinfo.CompanyDate, new { @class = "form-control", @ID = "txtBPCompanyDate", @type = "Date" })*@
                            <input autocomplete="off" placeholder="mm/dd/yyyy" name=xd size=10 maxlength=10 id="txtBPCompanyDate" class="form-control" onkeyup="this.value=this.value.replace(/^(\d\d)(\d)$/g,'$1/$2').replace(/^(\d\d\/\d\d)(\d+)$/g,'$1/$2').replace(/[^\d\/]/g,'')">
                            <i style="position: absolute; right: 25px; top: 12px;" class="fa fa-calendar componycal ui-datepicker-trigger"></i>
                        </div>
                        <div class="col-md-2 ">
                            @Html.Label("Default Language", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @Html.DropDownList("ddlBPDefaultLanguage", new SelectList((IEnumerable)ViewData["Languagelst"], "Language", "LanguageDescription"), new { @class = "form-control js-example-basic-single" })
                        </div>


                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Inception Country", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.DropDownList("ddlInceptionCountry", new SelectList((IEnumerable)ViewData["Countrylst"], "Alpha3", "CountryName"), new { @class = "form-control  js-example-basic-single" })
                        </div>
                        <div class="col-md-2 ">
                            @Html.Label("Contact Email", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.Email, new { @class = "form-control", @ID = "txtBPEmail" })
                        </div>


                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Website", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.Website, new { @class = "form-control", @ID = "txtBPWebsite" })
                        </div>
                        <div class="col-md-2 ">
                            @Html.Label("Division\\Department", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.Department, new { @class = "form-control", @ID = "txtBPDepartment" })
                        </div>


                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Toll Free Phone", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.TollFreePhone, new { @class = "form-control", @ID = "txtBPTollFreePhone", @maxlength = "15", @placeholder = "(000) 000-0000" })

                        </div>
                        <div class="col-md-2 ">
                            @Html.Label("Main Phone", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.MainPhone, new { @class = "form-control", @ID = "txtBPMainPhone", @maxlength = "15", @placeholder = "(000) 000-0000" })
                        </div>


                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Second Phone", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.SecondPhone, new { @class = "form-control", @ID = "txtBPSecondPhone", @maxlength = "15", @placeholder = "(000) 000-0000" })
                        </div>
                        <div class="col-md-2 ">
                            @Html.Label("Fax", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.Fax, new { @class = "form-control", @ID = "txtBPFax", @maxlength = "15", @placeholder = "(000) 000-0000" })
                        </div>

                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Average No of Users", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.BPinfo.NoofUsers, new { @class = "form-control",@ID = "txtBPNoofUsers",@type="number", @min = "0", @Value = "50", @maxlength = "5"})
                        </div>
                        <div class="col-md-2 ">
                            @Html.Label("Pay User Fees", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.DropDownListFor(model => model.BPinfo.UsageFee, new List<SelectListItem>() { new SelectListItem() { Text = "Yes", Value = "True" }, new SelectListItem() { Text = "No", Value = "False" } }, new { @id = "ddlUsageFee", @class = "form-control" })
                        </div>

                    </div>
                </div>
            </div>
        </div>

        <div class="my-2" id="divAddress">
            <h4><span id="lblAddress"></span></h4>
            <hr />
            <div class="bg-white p-3 border">

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Address 1", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.AddInfo.Address1, new { @class = "form-control", @ID = "txtAddress1" })
                        </div>

                        <div class="col-md-2 ">
                            @Html.Label("Address 2", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.AddInfo.Address2, new { @class = "form-control", @ID = "txtAddress2" })
                        </div>
                    </div>
                </div>


                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("City", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.AddInfo.City, new { @class = "form-control", @ID = "txtAddressCity" })
                        </div>

                        <div class="col-md-2 ">
                            @Html.Label("State", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.AddInfo.State, new { @class = "form-control", @ID = "txtAddressState" })
                        </div>
                    </div>

                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Zip", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.AddInfo.Zip, new { @class = "form-control", @ID = "txtAddressZip", @maxlength = "12" })
                        </div>

                        <div class="col-md-2 ">
                            @Html.Label("Country", htmlAttributes: new { @class = "control-label form-label" }) <span class="text-danger font-weight-bold">*</span>
                        </div>
                        <div class="col-md-4">
                            @*@Html.TextBoxFor(model => model.AddInfo.Country, new { @class = "form-control", @ID = "txtAddressCountry" })*@
                            @Html.DropDownList("AddressCountry", new SelectList((IEnumerable)ViewData["Countrylst"], "Alpha3", "CountryName"), new { @class = "form-control  js-example-basic-single" })
                        </div>
                    </div>
                </div>
                @*<div class="form-group">
                        <div class="row">
                            <div class="col-md-2 ">
                                @Html.Label("Language", htmlAttributes: new { @class = "control-label form-label" })
                            </div>
                            <div class="col-md-4">
                                @Html.DropDownList("ddlAddressLanguage", new SelectList((IEnumerable)ViewData["Languagelst"], "Language", "Language"), new { @class = "form-control" })
                            </div>

                            <div class="col-md-2 ">
                                @Html.Label("Phone", htmlAttributes: new { @class = "control-label form-label" })
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.AddInfo.Phone, new { @class = "form-control", @ID = "txtAddressPhone", @maxlength = "15" })
                            </div>
                        </div>
                    </div>*@
                @*<div class="form-group">
                        <div class="row">
                            <div class="col-md-2 ">
                                @Html.Label("Work Phone", htmlAttributes: new { @class = "control-label form-label" })
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.AddInfo.WorkPhone, new { @class = "form-control", @ID = "txtAddressWorkPhone", @maxlength = "15" })
                            </div>

                            <div class="col-md-2 ">
                                @Html.Label("Mobile Phone", htmlAttributes: new { @class = "control-label form-label" })
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.AddInfo.MobilePhone, new { @class = "form-control", @ID = "txtMobilePhone", @maxlength = "12" })
                            </div>
                        </div>
                    </div>*@
                <div class="form-group">
                    <div class="row">
                        @*<div class="col-md-2 ">
                                @Html.Label("FAX", htmlAttributes: new { @class = "control-label form-label" })
                            </div>
                            <div class="col-md-4">
                                @Html.TextBoxFor(model => model.AddInfo.Fax, new { @class = "form-control", @ID = "txtAddressFax", @maxlength = "15" })
                            </div>*@
                        <div class="col-md-2 ">
                            @Html.Label("PO Box", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.AddInfo.POBox, new { @class = "form-control", @ID = "txtAddressPOBox" })
                        </div>
                        <div class="col-md-2 ">
                            @Html.Label("Timezone", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.AddInfo.TimeZone, new { @class = "form-control", @ID = "txtAddressTimezone" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("Location", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.AddInfo.Location, new { @class = "form-control", @ID = "txtAddressLocation" })
                        </div>

                        <div class="col-md-2 ">
                            @Html.Label("District Postal Code", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.AddInfo.DistrictPostalCode, new { @class = "form-control", @ID = "txtAddressDistrictPostalCode" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-2 ">
                            @Html.Label("County", htmlAttributes: new { @class = "control-label form-label" })
                        </div>
                        <div class="col-md-4">
                            @Html.TextBoxFor(model => model.AddInfo.Country, new { @class = "form-control", @ID = "txtAddressCounty" })
                        </div>


                    </div>
                </div>
                @*set the value of usertype in hidden field*@
                @Html.HiddenFor(model => model.User.RegistrationType, new { @Id = "RegistrationTypeId" })
                <div class="form-group">
                    <div class="text-center">
                        <input type="checkbox" id="chkcondition" />Check here to indicate that you have read and agree to the terms of the <a href='@Url.Action("PrivacyPolicy","Home",new { token = Request.QueryString["token"] })' target="_blank">Service Agreement</a> .
                    </div>
                </div>
                <div class="form-group">
                    <div class="text-right">
                        <input type="button" id="btnsave" name="Create" class="btn btn-info" value="Create" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">


    $(document).ready(function () {
        $('.js-example-basic-single').select2();

        // calendar
        $("#txtPesonalDateOfBorn").datepicker({

            dateFormat: "mm/dd/yy",
            //yyyy/mm/dd
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+0"

        });
        $('.fa-calendar').click(function () {
            $("#txtPesonalDateOfBorn").focus();

        });
        $("#txtBPCompanyDate").datepicker({

            dateFormat: "mm/dd/yy",
            //yyyy/mm/dd
            changeMonth: true,
            changeYear: true,
            yearRange: "-100:+0"

        });
        $('.componycal').click(function () {
            $("#txtBPCompanyDate").focus();

        });
        // end


        $('#lblPersonalInfo').text("Personal Information");
        $('#lblAddress').text("Personal Address Information");
        SetGender();
        $('#lblBPInfo').hide();
        $('#divPersonalInfo').hide();
        $('#divAddress').hide();
        //checkRegistrationType();
        BindBusinessType();
        $('#txtTitle').change(function (e) {
            SetGender();
        });

        $('#txtGender').change(function (e) {
            setTitle();
        });


        $('#ddlBPType').change(function () {
            var seletedvalue = $(this).find(':selected').val();
            if (seletedvalue == 'PIND') {
                $('#lblBPInfo').hide();
                $('#lblPersonalInfo').text("Private Individual Information");
                $('#lblAddress').text("Private Individual Address Information");
                $('#divPersonalInfo').show();
                $('#divAddress').show();
            }
            else if (seletedvalue == 'IND') {
                $('#lblBPInfo').hide();
                $('#lblPersonalInfo').text("Individual Information");
                $('#lblAddress').text("Individual Address Information");
                $('#divPersonalInfo').show();
                $('#divAddress').show();
            }
            else {
                $('#lblBPInfo').show();
                $('#lblAddress').text("Business Address Information");
                $('#divPersonalInfo').hide();
                $('#divAddress').show();
            }
        });

        $('#btnsave').click(function () {
            if (!$('#chkcondition').is(":checked")) {
                alert("Please accept term and condition.");
                return;
            }

            if (ValidateUserData() == true)
            {
                
                // Initalize data object
                var User = {};
                var PersonalInformation = {};
                var AddressIinformation = {};
                var BusinessInformation = {};

                // fill data to object
                User.UserID = $('#txtUserID').val().trim();
                User.EmailID = $('#txtEmailID').val().trim();
                User.Password = $('#txtPassword').val().trim();
                User.ConfirmPassword = $('#txtConfirmPassword').val().trim();
                //User.RegistrationType = //$('#RegistrationTypeId').text().trim();
                if ($('#ddlBPType').val().trim() == "PIND" || $('#ddlBPType').val().trim() == "IND") {
                    User.RegistrationType = "NormalUser";
                }
                else {
                    User.RegistrationType = "BusinessPartner";
                }

                User.IndustryShareID = $('#Industry').val();
                User.BPType = $('#ddlBPType').val().trim();
                User.Partner = $("#ddlBPType  option:selected").text().trim();
                User.DefaultG = $('#txtDefaultG').val();
                User.DefaultPL = $('#txtDefaultPL').val();
                //-------- Personal Information
                PersonalInformation.Title = $('#txtTitle').children("option:selected").val().trim();
                if (PersonalInformation.Title !='')
                    $('#PersonalInfo_Title').val($('#txtTitle').children("option:selected").val().trim());

                PersonalInformation.MiddleName = $('#txtPersonalMiddleName').val().trim();
                PersonalInformation.FirstName = $('#txtPesonalFirstName').val().trim();
                PersonalInformation.LastName = $('#txtPersonalLastName').val().trim();
                PersonalInformation.Name2 = $('#txtPesonalName2').val().trim();
                PersonalInformation.LastName2 = $('#txtPesonalLastName2').val().trim();
                PersonalInformation.AKA = $('#txtPesonalAKA').val().trim();
                PersonalInformation.Gender = $('#txtGender').children("option:selected").val().trim();

                if (PersonalInformation.Gender != '')
                    $('#PersonalInfo_Gender').val($('#txtGender').children("option:selected").val().trim());

                PersonalInformation.DateOfBorn = $('#txtPesonalDateOfBorn').val().trim();
                PersonalInformation.Language = $('#ddlPersonalLanguage').val().trim();
                PersonalInformation.BirthCountry= $('#ddlPersonalBirthCountry').val().trim();
                PersonalInformation.Profession = $('#txtProfessionOccuption').val().trim();
                PersonalInformation.DefaulCountry = $('#ddlPersonalDefaulCountry').val().trim();
                PersonalInformation.Mobile = RemeoveUnexpectedSymbole( $('#txtPersonalMobilePhone').val().trim());
                PersonalInformation.WorkPhone = RemeoveUnexpectedSymbole( $('#txtPersonalWorkPhone').val().trim());
                PersonalInformation.Fax = RemeoveUnexpectedSymbole( $('#txtPersonalFax').val().trim());
                PersonalInformation.Phone = RemeoveUnexpectedSymbole( $('#txtPesonalPhone').val().trim());
                PersonalInformation.Email = $('#txtPersonalEmail').val().trim();
                PersonalInformation.Website = $('#txtPesonalWebsite').val().trim();

                //---------- Address
                AddressIinformation.Address1 = $('#txtAddress1').val().trim();
                AddressIinformation.Address2 = $('#txtAddress2').val().trim();
                AddressIinformation.City = $('#txtAddressCity').val().trim();
                AddressIinformation.State = $('#txtAddressState').val().trim();
                AddressIinformation.Zip = $('#txtAddressZip').val().trim();
                AddressIinformation.CountryKey = $('#AddressCountry').val().trim();
                AddressIinformation.Country = $("#AddressCountry option:selected").text().trim();
                //AddressIinformation.Language = $('#ddlAddressLanguage').val().trim();
               // AddressIinformation.Phone = $('#txtAddressPhone').val().trim();
                //AddressIinformation.WorkPhone = $('#txtAddressWorkPhone').val().trim();
                //AddressIinformation.MobilePhone = $('#txtMobilePhone').val().trim();
                //AddressIinformation.Fax = $('#txtAddressFax').val().trim();
                AddressIinformation.Timezone = $('#txtAddressTimezone').val().trim();
                AddressIinformation.Location = $('#txtAddressLocation').val().trim();
                AddressIinformation.DistrictPostalCode = $('#txtAddressDistrictPostalCode').val().trim();
                AddressIinformation.POBox = $('#txtAddressPOBox').val().trim();
                AddressIinformation.county = $('#txtAddressCounty').val().trim();
                // Business Infomation
                BusinessInformation.CompName = $('#txtBPCompName').val().trim();
                BusinessInformation.ContactNameFirst = $('#txtBPContactNameFirst').val().trim();
                BusinessInformation.ContactNameLast = $('#txtBPContactNameLast').val().trim();
                BusinessInformation.CompanyEIN = $('#txtBPCompanyEIN').val().trim();
                BusinessInformation.CompanyDate = $('#txtBPCompanyDate').val().trim();
                BusinessInformation.Language = $('#ddlBPDefaultLanguage').val().trim();
                BusinessInformation.Country = $('#ddlInceptionCountry').val().trim();
                BusinessInformation.Email = $('#txtBPEmail').val().trim();
                BusinessInformation.Website = $('#txtBPWebsite').val().trim();
                BusinessInformation.Department = $('#txtBPDepartment').val().trim();
                BusinessInformation.TollFreePhone = RemeoveUnexpectedSymbole( $('#txtBPTollFreePhone').val().trim());
                BusinessInformation.MainPhone = RemeoveUnexpectedSymbole( $('#txtBPMainPhone').val().trim());
                BusinessInformation.SecondPhone = RemeoveUnexpectedSymbole( $('#txtBPSecondPhone').val().trim());
                BusinessInformation.Fax = RemeoveUnexpectedSymbole($('#txtBPFax').val().trim());
                BusinessInformation.UsageFee = $('#ddlUsageFee option:selected').val().trim();
                BusinessInformation.NoOfUsers = $('#txtBPNoofUsers').val().trim();
      
                var registerUserData = {
                    "User": User,
                    "PersonalInfo": PersonalInformation,
                    "AddInfo": AddressIinformation,
                    "BPInfo": BusinessInformation
                };
              // call ajax
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("RegisterUser", "Account")',
                    data: '{registerUserData: ' + JSON.stringify(registerUserData) + '}',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        if (response.operationValue == '-1') {
                            alert(response.responseText);
                        }
                        else {
                            redirecturl = window.location.origin ? window.location.origin + '/' : window.location.protocol + '/' + window.location.host + '/';
                           // alert(redirecturl);

                            if (response.roleId == "2") {
                                window.location.href = redirecturl + "FHFile/ManageTag?token=" + response.tokenValue;
                            }
                            else {
                                window.location.href = redirecturl + "FHFile/Individual?token=" + response.tokenValue;
                            }
                        }
                        //redirect to login form with ID prefilled

                        //redirecturl = window.location.origin ? window.location.origin + '/' : window.location.protocol + '/' + window.location.host + '/';
                        //window.location.href = redirecturl + "Account/SignIn?UserId=" + User.UserID;

                        //clear form element
                        //if (response.operationValue == '1') {
                        //    clear_form_elements();
                        //}

                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });


            } else {
                //return false;
                alert("Please maintain required data!");
                return false;
            }
        });
    });



    function ValidateUserData() {
        IsValide = false;
        var vtxtUserID = 0, vtxtEmailID = 0, vtxtPassword = 0, vtxtConfirmPassword = 0, vtxtTitle = 0,
            vtxtFirstName = 0, vtxtLastName = 0, vtxtMiddleName = 0, vtxtName2 = 0, vtxtLastName2 = 0,
            vtxtAKA = 0, vtxtGender = 0, vtxtProfession = 0, vtxtLanguage = 0, vtxtCountry = 0,
            vtxtCompName = 0, vtxtCompName2 = 0, vtxtDepartment = 0, vtxtAddress1 = 0, vtxtAddress2 = 0,
            vtxtPOBox = 0, vtxtCity = 0, vtxtState = 0, vtxtZip = 0, vtxtAddressCountry = 0, vtxtAddressLanguage = 0,
            vtxtPhone = 0, vtxtWorkPhone = 0, vtxtMobilePhone = 0, vtxtFax = 0, vtxtTimezone = 0, vtxtLocation = 0, vtxtDistrictPostalCode = 0, matchPassword = 0;
        emailValidate = 0; vddlIndustry = 0, vddlBPType = 0, vtxtAddressState = 0, vtxtPersonalEmail = 0, vtxtDefaultLanguage = 0, vtxtBPMainPhone = 0, vtxtBPEmail = 0,
            vPesonalDateOfBorn = 0, vBPCompanyDate = 0;

        if ($('#Industry').val() == "0") {
            vddlIndustry = -1;
            $('#Industry').addClass("validateClass");
        }
        else {
            //alert($('#Industry :selected').text());
            //alert($('#Industry').val());
            vddlIndustry = 0;
            $('#Industry').removeClass("validateClass");
        }

        //Business Type
        if ($('#ddlBPType').val() == "0") {
            vddlBPType = -1;
            $('#ddlBPType').addClass("validateClass");
        }
        else
        {

            vddlBPType = 0;
            $('#ddlBPType').removeClass("validateClass");
        }




        if ($('#txtUserID').val() == "") {
            vtxtUserID = -1;
            $('#txtUserID').addClass("validateClass");
        }
        else {
            $('#txtUserID').removeClass("validateClass");
        }
        // Email
        if ($('#txtEmailID').val() == "") {
            vtxtEmailID = -1;
            $('#txtEmailID').addClass("validateClass");
        }
        else {
            $('#txtEmailID').removeClass("validateClass");
        }



        // pass
        if ($('#txtPassword').val() == "") {
            vtxtPassword = -1;
            $('#txtPassword').addClass("validateClass");
        }
        else {
            $('#txtPassword').removeClass("validateClass");
        }
        // Confirm
        if ($('#txtConfirmPassword').val() == "") {
            vtxtConfirmPassword = -1;
            $('#txtConfirmPassword').addClass("validateClass");
        }
        else {
            $('#txtConfirmPassword').removeClass("validateClass");
        }




        // Profession
        //if ($('#txtProfessionOccuption').val() == "") {
        //    vtxtProfession = -1;
        //    $('#txtProfessionOccuption').addClass("validateClass");
        //}
        //else {
        //    $('#txtProfessionOccuption').removeClass("validateClass");
        //}



        // Address infomation validation

        // Address Country
        if ($('#AddressCountry').val() == 0 || $('#AddressCountry').val()=="0") {
            vtxtAddressCountry = -1;
            $('#AddressCountry').addClass("validateClass");
        }
        else {
            $('#AddressCountry').removeClass("validateClass");
        }

        // Adddress
        if ($('#txtAddress1').val() == "") {
            vtxtAddress1 = -1;
            $('#txtAddress1').addClass("validateClass");
        }
        else {
            $('#txtAddress1').removeClass("validateClass");
        }

        // City
        if ($('#txtAddressCity').val() == "") {
            vtxtCity = -1;
            $('#txtAddressCity').addClass("validateClass");
        }
        else {
            $('#txtAddressCity').removeClass("validateClass");
        }

        // State
        if ($('#txtAddressState').val() == "") {
            vtxtAddressState = -1;
            $('#txtAddressState').addClass("validateClass");
        }
        else {
            $('#txtAddressState').removeClass("validateClass");
        }

        //if ($('#txtAddressDistrictPostalCode').val() != "") {
        //    if (allnumeric($('#txtAddressDistrictPostalCode').val()) == -1) {
        //        $('#txtAddressDistrictPostalCode').addClass("validateClass");
        //        vtxtDistrictPostalCode = -1;
        //    }
        //    else {
        //        $('#txtAddressDistrictPostalCode').removeClass("validateClass");
        //    }

        //}
        if ($('#txtAddressZip').val() == "") {
            vtxtZip = -1;
            $('#txtAddressZip').addClass("validateClass");
        }
        else {
            if ($('#txtAddressZip').val() != "") {
                if (allnumeric($('#txtAddressZip').val()) == -1) {
                    $('#txtAddressZip').addClass("validateClass");
                    vtxtZip = -1;
                }
                else {
                    $('#txtAddressZip').removeClass("validateClass");
                }
            }
        }

        // For Business info validation
        if ($('#ddlBPType').val().trim() == "PIND" || $('#ddlBPType').val().trim() == "IND") {
            // not validate Business info field validate Persona Info section
            // Personal Information validatiotn
            if ($('#txtTitle').children("option:selected").val() == "") {
                vtxtTitle = -1;
                $('#txtTitle').addClass("validateClass");
            }
            else {
                $('#txtTitle').removeClass("validateClass");
            }

            // first name
            if ($('#txtPesonalFirstName').val() == "") {
                vtxtFirstName = -1;
                $('#txtPesonalFirstName').addClass("validateClass");
            }
            else {
                $('#txtPesonalFirstName').removeClass("validateClass");
            }
            //Last Name

            if ($('#txtPersonalLastName').val() == "") {
                vtxtFirstName = -1;
                $('#txtPersonalLastName').addClass("validateClass");
            }
            else {
                $('#txtPersonalLastName').removeClass("validateClass");
            }

            // Gender
            if ($('#txtGender').children("option:selected").val() == "") {
                vtxtGender = -1;
                $('#txtGender').addClass("validateClass");
            }
            else {
                $('#txtGender').removeClass("validateClass");
            }
            // Mobile
            if ($('#txtPersonalMobilePhone').val() != "") {

                vtxtMobilePhone = allnumeric(RemeoveUnexpectedSymbole($('#txtPersonalMobilePhone').val()));
                if (vtxtMobilePhone == 0) {
                    $('#txtPersonalMobilePhone').removeClass("validateClass");
                }
                else {
                    $('#txtPersonalMobilePhone').addClass("validateClass");
                }
            }

            // work phond
            if ($('#txtPersonalWorkPhone').val() != "") {
                vtxtWorkPhone = allnumeric(RemeoveUnexpectedSymbole($('#txtPersonalWorkPhone').val()));// check all numeric
                if (vtxtWorkPhone == 0) {
                    $('#txtPersonalWorkPhone').removeClass("validateClass");
                }
                else {
                    $('#txtPersonalWorkPhone').addClass("validateClass");
                }
            }

            // check other numeric field if fill wrong data
            if ($('#txtPersonalFax').val() != "") {
                if (allnumeric(RemeoveUnexpectedSymbole($('#txtPersonalFax').val())) == -1) {
                    $('#txtPersonalFax').addClass("validateClass");
                    vtxtFax = -1;
                }
                else {
                    $('#txtPersonalFax').removeClass("validateClass");
                }
            }

            if ($('#txtPesonalPhone').val() == "") {
                $('#txtPesonalPhone').addClass("validateClass");
                vtxtPhone = -1;
            }
            else {
                if ($('#txtPesonalPhone').val() != "") {
                    if (allnumeric(RemeoveUnexpectedSymbole($('#txtPesonalPhone').val())) == -1) {
                        $('#txtPesonalPhone').addClass("validateClass");
                        vtxtPhone = -1;
                    }
                    else {
                        $('#txtPesonalPhone').removeClass("validateClass");
                    }
                }
            }



            if ($('#txtPesonalDateOfBorn').val() == "") {
                $('#txtPesonalDateOfBorn').addClass("validateClass");
                vPesonalDateOfBorn = -1;
            }
            else {
                $('#txtPesonalDateOfBorn').removeClass("validateClass");
            }




            //if ($('#txtPersonalEmail').val() == "") {
            //    $('#txtPersonalEmail').addClass("validateClass");
            //    vtxtPhone = -1;
            //}
            //else {
            //    $('#txtPersonalEmail').removeClass("validateClass");
            //}
            // pref. language
            if ($('#ddlPersonalLanguage').val() == "Select Language") {
                vtxtCountry = -1;
                $('#ddlPersonalLanguage').addClass("validateClass");
            }
            else {
                $('#ddlPersonalLanguage').removeClass("validateClass");
            }

        } else {
            // validation business info filedx
            //Company
            if ($('#txtBPCompName').val() == "") {
                vtxtCompName = -1;
                $('#txtBPCompName').addClass("validateClass");
            }
            else {
                $('#txtBPCompName').removeClass("validateClass");
            }

            // Department
            //if ($('#txtBPDepartment').val() == "") {
            //    vtxtDepartment = -1;
            //    $('#txtBPDepartment').addClass("validateClass");
            //}
            //else {
            //    $('#txtBPDepartment').removeClass("validateClass");
            //}
            // ddlBPDefaultLanguage
            if ($('#ddlBPDefaultLanguage').val() == "Select Language") {
                vtxtDefaultLanguage = -1;
                $('#ddlBPDefaultLanguage').addClass("validateClass");
            }
            else {
                $('#ddlBPDefaultLanguage').removeClass("validateClass");
            }

            if ($('#txtBPMainPhone').val() == "") {
                vtxtBPMainPhone = -1;
                $('#txtBPMainPhone').addClass("validateClass");
            }
            else {
                if (allnumeric(RemeoveUnexpectedSymbole($('#txtBPMainPhone').val())) == -1) {
                    $('#txtBPMainPhone').addClass("validateClass");
                    vtxtBPMainPhone = -1;
                }
                else {
                    $('#txtBPMainPhone').removeClass("validateClass");
                }
            }
            //if ($('#txtBPEmail').val() == "") {
            //    vtxtBPEmail = -1;
            //    $('#txtBPEmail').addClass("validateClass");
            //}
            //else {
            //    $('#txtBPEmail').removeClass("validateClass");
            //}
            if ($('#txtBPCompanyDate').val() == "") {
                $('#txtBPCompanyDate').addClass("validateClass");
                vBPCompanyDate = -1;
            }
            else {
                $('#txtBPCompanyDate').removeClass("validateClass");
            }
        }





        // end

        matchPassword = validatepassword();
        emailValidate = validateEmail($('#txtEmailID').val());

        if (vtxtUserID == 0 && vtxtEmailID == 0 && vtxtPassword == 0 && vtxtConfirmPassword == 0 && vtxtTitle == 0 &&
            vtxtFirstName == 0 && vtxtLastName == 0 && vtxtMiddleName == 0 && vtxtName2 == 0 && vtxtLastName2 == 0 &&
            vtxtAKA == 0 && vtxtGender == 0 && vtxtProfession == 0 && vtxtLanguage == 0 && vtxtCountry == 0 &&
            vtxtCompName == 0 && vtxtCompName2 == 0 && vtxtDepartment == 0 && vtxtAddress1 == 0 && vtxtAddress2 == 0 &&
            vtxtPOBox == 0 && vtxtCity == 0 && vtxtState == 0 && vtxtZip == 0 && vtxtAddressCountry == 0 && vtxtAddressLanguage == 0 &&
            vtxtPhone == 0 && vtxtWorkPhone == 0 && vtxtMobilePhone == 0 && vtxtFax == 0 && vtxtTimezone == 0 && vtxtLocation == 0 &&
            vtxtDistrictPostalCode == 0 && matchPassword == 0 && emailValidate == 0 && vddlIndustry == 0 && vddlBPType == 0 && vtxtAddressState == 0 && vtxtPersonalEmail == 0 && vtxtBPEmail==0
            && vtxtDefaultLanguage == 0 && vtxtBPMainPhone == 0 && vPesonalDateOfBorn == 0 && vBPCompanyDate==0) {

            IsValide = true;
        }


        return IsValide;

    }


    function txtValidation(txtBoxName) {
    }

    function SetGender() {
        if ($('#txtTitle').children("option:selected").val() == 'Mr.') {
            $('#txtGender').val('Male');
        }
        if ($('#txtTitle').children("option:selected").val() == 'Miss.') {
            $('#txtGender').val('Female');
        }
        $('#PersonalInfo_Title').val($('#txtTitle').children("option:selected").val().trim());
        $('#PersonalInfo_Gender').val($('#txtGender').children("option:selected").val().trim());
    }

    function setTitle() {
        if ($('#txtGender').children("option:selected").val() == 'Male') {
            $('#txtTitle').val('Mr.');
        }
        if ($('#txtGender').children("option:selected").val() == 'Female') {
            $('#txtTitle').val('Miss.');
        }
        $('#PersonalInfo_Title').val($('#txtTitle').children("option:selected").val().trim());
        $('#PersonalInfo_Gender').val($('#txtGender').children("option:selected").val().trim());
    }

    function clear_form_elements() {
        $('input').each(function (e, index) {
            switch (this.type) {
                case 'text':
                    $(this).val('');
                    break;
                case 'password':
                    $(this).val('');
                    break;
            }
        });

        // Reset default value

        $('#Industry').val(0);
        $('#ddlBPType').val(0);
        $('#AddressCountry').val(0);

    }

    $('#txtConfirmPassword, #txtPassword').blur(function ()
    {
        validatepassword();
    });


    function validatepassword()
    {
        var validatepass = 0;
        if ($('#txtPassword').val() != $('#txtConfirmPassword').val())
        {
            $('#txtConfirmPassword').addClass("validateClass");
            validatepass = -1;
        }
        else
        {
            $('#txtConfirmPassword').removeClass("validateClass");

        }

        return validatepass;
    }
    function checkRegistrationType() {

        $("#chkIndividual").prop("checked", true);
        $('#RegistrationTypeId').text('NormalUser');
        $('#lblPersonalInfo').text("Personal Information");
        $('#lblAddress').text("Address Information");
        $(".chkcheck").click(function ()
        {

            $("#chkIndividual").attr("checked", false);
            $("#chkRegistrationType").prop("checked", true);
            $('#RegistrationTypeId').text('BusinessPartner');
            BindBusinessType();
            $('#lblPersonalInfo').text("Business Information");
            $('#lblAddress').text("Business Address Information");
        });

        $(".uncheck").click(function ()
        {

            $("#chkRegistrationType").attr("checked", false);
            $('#RegistrationTypeId').text('NormalUser');
            $("#chkIndividual").prop("checked", true);
            BindBusinessType();
            $('#lblPersonalInfo').text("Personal Information");
            $('#lblAddress').text("Address Information");

            });


    }

    	function validateEmail(sEmail) {

         var filter = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
          if (filter.test(sEmail)) {
              // return true;
              $('#txtEmailID').removeClass("validateClass");
              return 0;
              }

            else {
              //return false;
              $('#txtEmailID').addClass("validateClass");
              return -1;
              }
    }
    function allnumeric(inputtxt) {
        // var numbers = /^[-+]?[0-9]+$/;// for + and - as optional
        var numbers = /^[0-9]+$/;
        if (numbers.test(inputtxt)) {
            //return true;
            return 0;
        }
        else {
            //return false;
            return -1;
        }
    }




    // Bind Business type dropdown list

    function BindBusinessType() {
        $(function () {
            var ddlBPType = $("#ddlBPType");
            ddlBPType.empty().append('<option selected="selected" value="0" disabled = "disabled">Loading.....</option>');
            $.ajax({
                type: "GET",
                url:'@Url.Action("GetBusinessType", "Account")',
                success: function (response) {
                    ddlBPType.empty().append('<option selected="selected" value="0">Select Business Type</option>');
                    if ($('#chkIndividual').is(':checked') == true) {
                        RemoveItemBusinessTypeddl(response);

                    }

                    else {
                        RemoveBusinessItem(response);

                    }

                    $.each(response, function () {
                        ddlBPType.append($("<option></option>").val(this['Value']).html(this['Text']));
                    });

                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });

    }

    function RemoveItemBusinessTypeddl(response)
    {
        //response.pop(3);
        //response.pop(4);
        //response.pop(5);

    }

    function RemoveBusinessItem(response)
    {

        //response.splice(0, 1);
        //response.splice(0, 1);


    }

    function RemeoveUnexpectedSymbole(stringData) {
        var retValue = stringData;
        if (stringData != null && stringData.length > 0) {
            retValue = stringData.replace(/[^a-z0-9\s]/gi, '').replace(/[-\s]/g, '');
        }
        return retValue;
    }

</script>

